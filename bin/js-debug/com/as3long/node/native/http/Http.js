/**
 * Generated by Apache Flex Cross-Compiler from com\as3long\node\native\http\Http.as
 * com.as3long.node.native.http.Http
 *
 * @fileoverview
 *
 * @suppress {checkTypes|accessControls}
 */

goog.provide('com.as3long.node.native.http.Http');

goog.require('$Debug');
goog.require('com.as3long.node.native.http.ClientRequest');
goog.require('com.as3long.node.native.http.Server');
goog.require('com.as3long.node.native.http.ServerResponse');



/**
 * @constructor
 */
com.as3long.node.native.http.Http = function() {
};


/**
 * Node维护几个连接每个服务器的HTTP请求。 这个函数允许后台发布请求。
 * @asparam	options 
 *  host：请求发送到的服务器的域名或IP地址。默认为'localhost'。
 *	hostname：用于支持url.parse()。hostname比host更好一些
 *	port：远程服务器的端口。默认值为80。
 *	localAddress：用于绑定网络连接的本地接口。
 *	socketPath：Unix域套接字（使用host:port或socketPath）
 *	method：指定HTTP请求方法的字符串。默认为'GET'。
 *	path：请求路径。默认为'/'。如果有查询字符串，则需要包含。例如'/index.html?page=12'。请求路径包含非法字符时抛出异常。目前，只否决空格，不过在未来可能改变。
 *	headers：包含请求头的对象。
 *	auth：用于计算认证头的基本认证，即'user:password'
 *	agent：控制Agent的行为。当使用了一个Agent的时候，请求将默认为Connection: keep-alive。可能的值为：
 *	undefined（默认）：在这个主机和端口上使用[全局Agent][]。
 *	Agent对象：在Agent中显式使用passed。
 *	false：在对Agent进行资源池的时候，选择停用连接，默认请求为：Connection: close。
 *	keepAlive：{Boolean} 保持资源池周围的套接字在未来被用于其它请求。默认值为false
 *	keepAliveMsecs：{Integer} 当使用HTTP KeepAlive的时候，通过正在保持活动的套接字发送TCP KeepAlive包的频繁程度。默认值为1000。仅当keepAlive被设置为true时才相关。
 * @asparam	callback
 * @asreturn
 * @export
 * @param {*} options
 * @param {Function} callback
 * @return {com.as3long.node.native.http.ClientRequest}
 */
com.as3long.node.native.http.Http.request = function(options, callback) {
  var /** @type {com.as3long.node.native.http.ClientRequest} */ clientRequest = new com.as3long.node.native.http.ClientRequest(com.as3long.node.native.http.Http.nativeHttp.request(options, callback));
  return clientRequest;
};


/**
 * @export
 * @param {*} options
 * @param {*} callback
 * @return {com.as3long.node.native.http.ClientRequest}
 */
com.as3long.node.native.http.Http.get = function(options, callback) {
  var /** @type {com.as3long.node.native.http.ClientRequest} */ clientRequest = new com.as3long.node.native.http.ClientRequest(com.as3long.node.native.http.Http.nativeHttp.get(options, callback));
  return clientRequest;
};


/**
 * @export
 * @param {Function} requestListener
 * @return {com.as3long.node.native.http.Server}
 */
com.as3long.node.native.http.Http.createServer = function(requestListener) {
  var /** @type {Function} */ __localFn0__ = function(req, res) {
    $Debug.outObject(req);
    requestListener(req, new com.as3long.node.native.http.ServerResponse(res));
  }
  var /** @type {com.as3long.node.native.http.Server} */ server = new com.as3long.node.native.http.Server(com.as3long.node.native.http.Http.nativeHttp.createServer(__localFn0__));
  return server;
};


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
com.as3long.node.native.http.Http.prototype.FLEXJS_CLASS_INFO = { names: [{ name: 'Http', qName: 'com.as3long.node.native.http.Http'}] };


/**
 * Prevent renaming of class. Needed for reflection.
 */
goog.exportSymbol('com.as3long.node.native.http.Http', com.as3long.node.native.http.Http);



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
com.as3long.node.native.http.Http.prototype.FLEXJS_REFLECTION_INFO = function () {
  return {
    variables: function () {
      return {
      };
    },
    accessors: function () {
      return {
      };
    },
    methods: function () {
      return {
        'Http': { type: '', declaredBy: 'com.as3long.node.native.http.Http'}
      };
    }
  };
};



/**
 * @export
 * @type {*}
 */
com.as3long.node.native.http.Http.nativeHttp = require("http")