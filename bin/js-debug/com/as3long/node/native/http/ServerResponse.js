/**
 * Generated by Apache Flex Cross-Compiler from com\as3long\node\native\http\ServerResponse.as
 * com.as3long.node.native.http.ServerResponse
 *
 * @fileoverview
 *
 * @suppress {checkTypes|accessControls}
 */

goog.provide('com.as3long.node.native.http.ServerResponse');



/**
 * @constructor
 * @param {*} nativeServerResponse
 */
com.as3long.node.native.http.ServerResponse = function(nativeServerResponse) {
  this.nativeServerResponse = nativeServerResponse;
};


/**
 * @private
 * @type {number}
 */
com.as3long.node.native.http.ServerResponse.prototype._statusCode;


/**
 * @private
 * @type {*}
 */
com.as3long.node.native.http.ServerResponse.prototype.nativeServerResponse;


/**
 * @private
 * @type {boolean}
 */
com.as3long.node.native.http.ServerResponse.prototype._sendDate;


/**
 * 发送一个 HTTP/1.1 100 Continue 消息至客户端，表明请求体可以被发送。可以在服务器上查
 * @asreturn
 * @export
 * @return {*}
 */
com.as3long.node.native.http.ServerResponse.prototype.writeContinue = function() {
  return this.nativeServerResponse.writeContinue();
};


/**
 * 向请求回复响应头
 * @asreturn
 * @export
 * @param {...} args
 * @return {*}
 */
com.as3long.node.native.http.ServerResponse.prototype.writeHead = function(args) {
  args = Array.prototype.slice.call(arguments, 0);
  return this.nativeServerResponse.writeHead.apply(this.nativeServerResponse, args);
};


/**
 * @export
 * @param {*} chunk
 * @param {string=} encoding
 * @return {*}
 */
com.as3long.node.native.http.ServerResponse.prototype.write = function(chunk, encoding) {
  encoding = typeof encoding !== 'undefined' ? encoding : 'utf8';
  return this.nativeServerResponse.write.call(this.nativeServerResponse, chunk, encoding);
};


/**
 * 设定套接字的超时时间为msecs。如果提供了回调函数，会将其添加为响应对象的'timeout'事件的监听器。
 * @asparam	msecs
 * @asparam	callback
 * @asreturn
 * @export
 * @param {number} msecs
 * @param {Function} callback
 * @return {*}
 */
com.as3long.node.native.http.ServerResponse.prototype.setTimeout = function(msecs, callback) {
  return this.nativeServerResponse.setTimeout(msecs, callback);
};


/**
 * 为默认或者已存在的头设置一条单独的头内容。如果这个头已经存在于 将被送出的头中，将会覆盖原来的内容。如果我想设置更多的头， 就使用一个相同名字的字符串数组
 * @asparam	name
 * @asparam	value
 * @asreturn
 * @export
 * @param {string} name
 * @param {*} value
 * @return {*}
 */
com.as3long.node.native.http.ServerResponse.prototype.setHeader = function(name, value) {
  return this.nativeServerResponse.setHeader(name, value);
};


/**
 * @export
 * @param {string} name
 * @return {*}
 */
com.as3long.node.native.http.ServerResponse.prototype.getHeader = function(name) {
  return this.nativeServerResponse.getHeader(name);
};


/**
 * 取消掉一个在队列内等待发送的header。
 * @asparam	name
 * @export
 * @param {string} name
 */
com.as3long.node.native.http.ServerResponse.prototype.removeHeader = function(name) {
  this.nativeServerResponse.removeHeader(name);
};


/**
 * 这个方法添加HTTP尾随headers（一个在消息末尾的header）给响应。
 * @asparam	headers
 * @export
 * @param {*} headers
 */
com.as3long.node.native.http.ServerResponse.prototype.addTrailers = function(headers) {
  this.nativeServerResponse.addTrailers(headers);
};


/**
 * @export
 * @param {*=} data
 * @param {string=} encoding
 */
com.as3long.node.native.http.ServerResponse.prototype.end = function(data, encoding) {
  data = typeof data !== 'undefined' ? data : null;
  encoding = typeof encoding !== 'undefined' ? encoding : "utf8";
  this.nativeServerResponse.end(data, encoding);
};


Object.defineProperties(com.as3long.node.native.http.ServerResponse.prototype, /** @lends {com.as3long.node.native.http.ServerResponse.prototype} */ {
/** @export */
headersSent: {
get: /** @this {com.as3long.node.native.http.ServerResponse} */ function() {
  return this.nativeServerResponse.headersSent;
}},
/** @export */
statusCode: {
get: /** @this {com.as3long.node.native.http.ServerResponse} */ function() {
  return this._statusCode;
},
set: /** @this {com.as3long.node.native.http.ServerResponse} */ function(value) {
  this._statusCode = value;
}},
/** @export */
sendDate: {
get: /** @this {com.as3long.node.native.http.ServerResponse} */ function() {
  return this._sendDate;
},
set: /** @this {com.as3long.node.native.http.ServerResponse} */ function(value) {
  this._sendDate = value;
}}}
);


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
com.as3long.node.native.http.ServerResponse.prototype.FLEXJS_CLASS_INFO = { names: [{ name: 'ServerResponse', qName: 'com.as3long.node.native.http.ServerResponse'}] };


/**
 * Prevent renaming of class. Needed for reflection.
 */
goog.exportSymbol('com.as3long.node.native.http.ServerResponse', com.as3long.node.native.http.ServerResponse);



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
com.as3long.node.native.http.ServerResponse.prototype.FLEXJS_REFLECTION_INFO = function () {
  return {
    variables: function () {
      return {
      };
    },
    accessors: function () {
      return {
        'headersSent': { type: 'Boolean', declaredBy: 'com.as3long.node.native.http.ServerResponse'},
        'statusCode': { type: 'int', declaredBy: 'com.as3long.node.native.http.ServerResponse'},
        'sendDate': { type: 'Boolean', declaredBy: 'com.as3long.node.native.http.ServerResponse'}
      };
    },
    methods: function () {
      return {
        'ServerResponse': { type: '', declaredBy: 'com.as3long.node.native.http.ServerResponse'},
        'writeContinue': { type: '*', declaredBy: 'com.as3long.node.native.http.ServerResponse'},
        'writeHead': { type: '*', declaredBy: 'com.as3long.node.native.http.ServerResponse'},
        'write': { type: '*', declaredBy: 'com.as3long.node.native.http.ServerResponse'},
        'setTimeout': { type: '*', declaredBy: 'com.as3long.node.native.http.ServerResponse'},
        'setHeader': { type: '*', declaredBy: 'com.as3long.node.native.http.ServerResponse'},
        'getHeader': { type: '*', declaredBy: 'com.as3long.node.native.http.ServerResponse'},
        'removeHeader': { type: 'void', declaredBy: 'com.as3long.node.native.http.ServerResponse'},
        'addTrailers': { type: 'void', declaredBy: 'com.as3long.node.native.http.ServerResponse'},
        'end': { type: 'void', declaredBy: 'com.as3long.node.native.http.ServerResponse'}
      };
    }
  };
};